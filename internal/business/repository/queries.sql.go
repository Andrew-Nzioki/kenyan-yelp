// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBusiness = `-- name: CreateBusiness :exec
INSERT INTO businesses (
    id, name, description, category, location, rating, 
    contact_info, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateBusinessParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Category    string
	Location    string
	Rating      sql.NullString
	ContactInfo sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) error {
	_, err := q.db.ExecContext(ctx, createBusiness,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Location,
		arg.Rating,
		arg.ContactInfo,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteBusiness = `-- name: DeleteBusiness :exec
DELETE FROM businesses WHERE id = $1
`

func (q *Queries) DeleteBusiness(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBusiness, id)
	return err
}

const getBusiness = `-- name: GetBusiness :one
SELECT id, name, description, category, location, rating, contact_info, created_at, updated_at FROM businesses WHERE id = $1
`

func (q *Queries) GetBusiness(ctx context.Context, id uuid.UUID) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusiness, id)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Location,
		&i.Rating,
		&i.ContactInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBusinesses = `-- name: ListBusinesses :many
SELECT id, name, description, category, location, rating, contact_info, created_at, updated_at FROM businesses 
WHERE ($1::text = '' OR category = $1)
  AND ($2::text = '' OR location = $2)
LIMIT $3 OFFSET $4
`

type ListBusinessesParams struct {
	Column1 string
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListBusinesses(ctx context.Context, arg ListBusinessesParams) ([]Business, error) {
	rows, err := q.db.QueryContext(ctx, listBusinesses,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Business
	for rows.Next() {
		var i Business
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Location,
			&i.Rating,
			&i.ContactInfo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusiness = `-- name: UpdateBusiness :exec
UPDATE businesses 
SET name = $2, 
    description = $3, 
    category = $4,
    location = $5,
    rating = $6,
    contact_info = $7,
    updated_at = $8
WHERE id = $1
`

type UpdateBusinessParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Category    string
	Location    string
	Rating      sql.NullString
	ContactInfo sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) UpdateBusiness(ctx context.Context, arg UpdateBusinessParams) error {
	_, err := q.db.ExecContext(ctx, updateBusiness,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Location,
		arg.Rating,
		arg.ContactInfo,
		arg.UpdatedAt,
	)
	return err
}
